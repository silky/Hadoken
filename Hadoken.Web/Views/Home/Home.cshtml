@using Hadoken.Web.Models.Home;

@model HomeModel

@{
    ViewData["Title"] = "Home Page";

    List<ElementModel> elementModels = Model.ElementModels;
}

<script type="text/javascript">

    var divSearch = null;
    var elements = null;
    var form = null;

    document.body.onload = function ()
    {
        elements =
        [
            @foreach (ElementModel elementModel in elementModels)
            {
                @Html.Raw($"{{ AtomicNumber: {elementModel.AtomicNumber}, Class: \"{elementModel.ClassName}\", IsSelected: {((Model.Symbols.Any(m => (m == elementModel.Symbol)) == true) ? "true" : "false")}, Name: \"{elementModel.Name}\", Symbol: \"{elementModel.Symbol}\" }},{Environment.NewLine}");
            }
        ];

        divSearch = document.getElementById('divSearch');
        form = document.forms[0];

        var chkIsAnd = document.getElementById('chkIsAnd');
        var chkIsOr = document.getElementById('chkIsOr');

        chkIsAnd.onchange = function ()
        {
            chkIsOr.checked = !chkIsAnd.checked;
        }

        chkIsOr.onchange = function ()
        {
            chkIsAnd.checked = !chkIsOr.checked;
        }

        form.onsubmit = function ()
        {
            return (GetSelectedElements().length > 0);
        }

        FormatSearch();
    };

    function AddElement(element)
    {
        var divElement = document.createElement('div');
        divElement.className = element.Class;

        var divElementSpan = document.createElement('span');
        divElementSpan.innerHTML = element.AtomicNumber;

        divElement.appendChild(divElementSpan);

        var divElementParagraph = document.createElement('p');
        divElementParagraph.innerHTML = element.Symbol;

        divElement.appendChild(divElementParagraph);

        divSearch.appendChild(divElement);

        var index = GetHiddenFormElements().length;

        var formElement = document.createElement('input');
        formElement.type = 'hidden';
        formElement.id = 'Symbols_' + index + '_';
        formElement.name = 'Symbols[' + index + ']';
        formElement.value = element.Symbol;
        form.appendChild(formElement);
    }

    function DeselectElements()
    {
        GetSelectedElements().forEach((m => { m.IsSelected = false; }));
    }

    function FormatSearch()
    {
        while (divSearch.hasChildNodes())
        {
            divSearch.removeChild(divSearch.lastChild);
        }

        var hiddenFormElements = GetHiddenFormElements();
    
        for (var i = 0; i < hiddenFormElements.length; i++)
        {
            var hiddenFormElement = hiddenFormElements[i];

            if ((hiddenFormElement.type == 'hidden') && (hiddenFormElement.id != undefined) && (hiddenFormElement.id.indexOf('Symbols') > -1))
            {
                form.removeChild(hiddenFormElement);
            }
        }
        
        GetSelectedElements().forEach(m => { AddElement(m); });
    }

    function GetHiddenFormElements()
    {
        var hiddenFormElements = new Array();
        var formElements = document.getElementsByTagName('input');
        
        for (var i = 0; i < formElements.length; i++)
        {
            var formElement = formElements[i];

            if ((formElement.type == 'hidden') && (formElement.id != undefined) && (formElement.id.indexOf('Symbols') > -1))
            {
                hiddenFormElements.push(formElement);
            }
        }

        return hiddenFormElements;
    }

    function GetSelectedElements()
    {
        return elements.filter(function(element) { return (element.IsSelected == true); });
    }

    function SelectElement(atomicNumber)
    {
        var element = elements[(atomicNumber - 1)];

        element.IsSelected = !element.IsSelected;

        var div = document.getElementById('div' + atomicNumber);

        if (element.IsSelected == true)
        {
            div.classList.add('BlackBorder')
        }
        else
        {
            div.classList.remove('BlackBorder');
        }

        FormatSearch();
    }

</script>

<div class="GreyBorder" style="width:882px;margin-left:auto;margin-right:auto;">

<div class="GreyBorder">

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @for( int i = 0; i < Model.Symbols.Count; i++)
    {
        @Html.HiddenFor(m => m.Symbols[i]);
    }

<div id="divSearch" class="GreyBorder">
</div>


<div>
<p><input id="chkIsAnd" type="checkbox" value="And" /> And</p>
<p><input id="chkIsOr" type="checkbox" value="Or" /> Or</p>
</div>

<div>
<p>@Html.ActionLink("Clear", "Home", "Home")</p>
<p><input id="cmdSubmit" type="submit" value="Search" /></p>
</div>
}

</div>

    @for (int i = 0; i < 9; i++)
    {
        List<ElementModel> periodElementList = new List<ElementModel>();

        <div class="Period">

            @switch (i)
            {
                case 0:
                    periodElementList.Add(elementModels.Where(m => (m.AtomicNumber == 1)).Single());

                    for (int j = 0; j < 16; j++)
                    {
                        periodElementList.Add(null);
                    }

                    periodElementList.Add(elementModels.Where(m => (m.AtomicNumber == 2)).Single());
                    break;

                case 1:
                    periodElementList.AddRange(elementModels.Where(m => ((m.AtomicNumber >= 3) && (m.AtomicNumber <= 4))));

                    for (int j = 0; j < 10; j++)
                    {
                        periodElementList.Add(null);
                    }

                    periodElementList.AddRange(elementModels.Where(m => ((m.AtomicNumber >= 5) && (m.AtomicNumber <= 10))));
                    break;

                case 2:
                    periodElementList.AddRange(elementModels.Where(m => ((m.AtomicNumber >= 11) && (m.AtomicNumber <= 12))));

                    for (int j = 0; j < 10; j++)
                    {
                        periodElementList.Add(null);
                    }

                    periodElementList.AddRange(elementModels.Where(m => ((m.AtomicNumber >= 13) && (m.AtomicNumber <= 18))));
                    break;

                case 3:
                    periodElementList.AddRange(elementModels.Where(m => ((m.AtomicNumber >= 19) && (m.AtomicNumber <= 36))));
                    break;

                case 4:
                    periodElementList.AddRange(elementModels.Where(m => ((m.AtomicNumber >= 37) && (m.AtomicNumber <= 55))));
                    break;

                case 5:
                    periodElementList.AddRange(elementModels.Where(m => ((m.AtomicNumber >= 55) && (m.AtomicNumber <= 56))));
                    periodElementList.Add(null);
                    periodElementList.AddRange(elementModels.Where(m => ((m.AtomicNumber >= 72) && (m.AtomicNumber <= 86))));
                    break;

                case 6:
                    periodElementList.AddRange(elementModels.Where(m => ((m.AtomicNumber >= 87) && (m.AtomicNumber <= 88))));
                    periodElementList.Add(null);
                    periodElementList.AddRange(elementModels.Where(m => ((m.AtomicNumber >= 104) && (m.AtomicNumber <= 118))));
                    break;

                case 7:
                    periodElementList.Add(null);
                    periodElementList.Add(null);
                    periodElementList.AddRange(elementModels.Where(m => ((m.AtomicNumber >= 57) && (m.AtomicNumber <= 71))));
                    break;

                case 8:
                    periodElementList.Add(null);
                    periodElementList.Add(null);
                    periodElementList.AddRange(elementModels.Where(m => ((m.AtomicNumber >= 89) && (m.AtomicNumber <= 103))));
                    break;

            }

            @for (int j = 0; j < periodElementList.Count; j++)
            {
                ElementModel periodElementModel = periodElementList[j];

                if (periodElementModel == null)
                {
                    <div class="GroupEmpty"></div>
                }
                else
                {
                    <div id="div@(periodElementModel.AtomicNumber)" class="@periodElementModel.ClassName" title="@periodElementModel.Name"><a href="javascript:SelectElement(@periodElementModel.AtomicNumber);"><span>@periodElementModel.AtomicNumber</span><p>@periodElementModel.Symbol</p></a></div>
                }
            }

        </div>
    }

</div>
